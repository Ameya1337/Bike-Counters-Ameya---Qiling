{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":63315,"databundleVersionId":6905368,"sourceType":"competition"},{"sourceId":7162234,"sourceType":"datasetVersion","datasetId":4136960}],"dockerImageVersionId":30587,"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code]\n# %% [code]\n# %% [code]\n# %% [code]\nimport pandas as pd\nimport numpy as np\nimport xgboost as xgb\nimport catboost as cat\nfrom pandas.tseries.holiday import Holiday, AbstractHolidayCalendar\nfrom dateutil.easter import easter\nfrom datetime import timedelta\n\n\n# Load the data\ndata = pd.read_parquet(\"/kaggle/input/mdsb-2023/train.parquet\")\ntest_data = pd.read_parquet(\"/kaggle/input/mdsb-2023/final_test.parquet\")\n#weather_data = pd.read_csv(\"/kaggle/input/external-data-cleaned/external_data_cleaned.csv\")\n\n\ndata[\"date\"] = pd.to_datetime(data[\"date\"])\ndata = data.set_index(\"date\")\ntest_data[\"date\"] = pd.to_datetime(test_data[\"date\"])\ntest_data = test_data.set_index(\"date\")\n#weather_data[\"date\"] = pd.to_datetime(weather_data[\"date\"])\n#weather_data.set_index(\"date\", inplace=True)\n#weather_data_hourly = weather_data.resample(\"H\").ffill()\n#weather_data_hourly = weather_data_hourly.drop(columns=[\"week\", \"day\"])\n\ntrain = data[[\"counter_name\", \"log_bike_count\"]]\ntest = test_data[[\"counter_name\"]]\n\n\nclass FrenchHolidayCalendar(AbstractHolidayCalendar):\n    rules = [\n        Holiday(\"New Year's Day\", month=1, day=1),\n        Holiday(\"Labour Day\", month=5, day=1),\n        Holiday(\"Victory in Europe Day\", month=5, day=8),\n        Holiday(\"Bastille Day\", month=7, day=14),\n        Holiday(\"Assumption of Mary\", month=8, day=15),\n        Holiday(\"All Saints' Day\", month=11, day=1),\n        Holiday(\"Armistice Day\", month=11, day=11),\n        Holiday(\"Christmas Day\", month=12, day=25),\n    ]\n\n    @staticmethod\n    def easter_related_holidays(year):\n        easter_sunday = easter(year)\n        return [\n            (easter_sunday + timedelta(days=1), \"Easter Monday\"),\n            (easter_sunday + timedelta(days=39), \"Ascension Day\"),\n        ]\n    \ndef cyclical_encode(df, column, max_value):\n    df[column + \"_sin\"] = np.sin(2 * np.pi * df[column] / max_value)\n    df[column + \"_cos\"] = np.cos(2 * np.pi * df[column] / max_value)\n    return df\n\ndef create_features(df):\n    df = df.copy()\n    df[\"hour\"] = df.index.hour\n    df[\"dayofweek\"] = df.index.dayofweek\n    df[\"quarter\"] = df.index.quarter\n    df[\"month\"] = df.index.month\n    df[\"dayofyear\"] = df.index.dayofyear\n\n    # Boolean for weekends\n    df[\"is_weekend\"] = df[\"dayofweek\"].isin([5, 6])\n\n    # cyclical\n    df = cyclical_encode(df, \"hour\", 24)\n    df = cyclical_encode(df, \"dayofweek\", 7)\n\n    # Boolean for holidays\n    cal = FrenchHolidayCalendar()\n    holidays = cal.holidays(start=df.index.min(), end=df.index.max())\n    easter_holidays = []\n    for year in range(df.index.year.min(), df.index.year.max() + 1):\n        for date, _ in FrenchHolidayCalendar.easter_related_holidays(year):\n            easter_holidays.append(date)\n    holidays = holidays.union(pd.to_datetime(easter_holidays))\n    df[\"is_holiday\"] = df.index.isin(holidays)\n\n    # Lockdown periods\n    lockdowns = {\n        \"lockdown_1\": (\"2020-03-17\", \"2020-05-10\"),\n        \"lockdown_2\": (\"2020-10-28\", \"2020-12-01\"),\n        # with curfew from 7 PM to 6 AM\n        \"lockdown_3_1\": (\"2021-04-03 19:00:00\", \"2021-05-18 06:00:00\"),\n        # with curfew from 9 PM to 6 AM\n        \"lockdown_3_2\": (\"2021-05-19 21:00:00\", \"2021-06-08 06:00:00\"),\n        # with curfew from 11 PM to 6 AM\n        \"lockdown_3_3\": (\"2021-06-09 23:00:00\", \"2021-06-29 06:00:00\"),\n    }\n    for lockdown, (start_date, end_date) in lockdowns.items():\n        mask = (df.index >= start_date) & (df.index <= end_date)\n        df[lockdown] = mask\n\n    return df\n\ntrain = create_features(train)\ntest = create_features(test)\n\n#combined_train = train.merge(\n#    weather_data_hourly, left_index=True, right_index=True, how=\"left\"\n#)\n#combined_test = test.merge(\n#    weather_data_hourly, left_index=True, right_index=True, how=\"left\"\n#)\n\nboolean_columns = [\n    \"is_weekend\",\n    \"is_holiday\",\n    \"lockdown_1\",\n    \"lockdown_2\",\n    \"lockdown_3_1\",\n    \"lockdown_3_2\",\n    \"lockdown_3_3\",\n]\n\nfor column in boolean_columns:\n    train[column] = train[column].astype(int)\n\n\nfor column in boolean_columns:\n    test[column] = test[column].astype(int)\n\n# Define features and target\n\n\nfeatures = [\n    \"counter_name\",\n    \"hour\",\n    \"dayofweek\",\n    \"quarter\",\n    \"month\",\n    \"dayofyear\",\n    \"is_weekend\",\n    \"hour_sin\",\n    \"hour_cos\",\n    \"dayofweek_sin\",\n    \"dayofweek_cos\",\n    \"is_holiday\",\n    \"lockdown_1\",\n    \"lockdown_2\",\n    \"lockdown_3_1\",\n    \"lockdown_3_2\",\n    \"lockdown_3_3\",\n]\ntarget = [\"log_bike_count\"]\ncat_feature = [\"counter_name\"]\n\n# Prepare training & test data\nX_train = train[features]\ny_train = train[target]\nX_test = test[features]\n\n#Train Model\nreg = xgb.XGBRegressor(tree_method=\"hist\", n_estimators=75, enable_categorical=True)\n\nreg.fit(\n    X_train,\n    y_train,\n    verbose=10,\n)\n\n\n# Make predictions\n\npredictions = reg.predict(X_test)\n\n\n# Create a DataFrame for predictions with the same index as test_data\npredictions_df = pd.DataFrame({\"log_bike_count\": predictions})\npredictions_df = predictions_df.reset_index(drop=True)\npredictions_df.to_csv(\"submissions.csv\", index=True, index_label=\"Id\")\n","metadata":{"_uuid":"a4c5378c-3617-4aa6-8e4f-ee59536ad29b","_cell_guid":"aeee98e4-8706-4691-a91a-d79f091f4ee1","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}